@page "/authorization"
@using Handicraft.Data
@using static Handicraft.Data.GetDataClass;
@using static Handicraft.Data.ConnectDB;
@using static Handicraft.Data.RegistrationModel;
@inject NotificationService NotificationService
@inherits Data.RegistrationModel
@inject AuthenticationStateProvider Provider

<div class="central-container">
    <div>
        <button class="invisible-wall"></button>
    </div>
    <EditForm Model="@LoginData" OnValidSubmit="LoginAsync">
        <RadzenCard class="reg-field">
            <h4 class="mb-4">Регистрация пользователя</h4>
            <h5 class="mb-2">Имя</h5>
            <RadzenTextBox Placeholder="" @bind-Value=LoginData.UserName />
            <h5 class="mb-2 mt-2">Пароль</h5>
            <RadzenPassword Placeholder="" @bind-Value=LoginData.Password />
            <p class="my-4">
                <button class="btn btn-primary" onclick=@GetUser>Войти в учетную запись</button>
            </p>
            <RadzenNotification />
        </RadzenCard>
        <DataAnnotationsValidator />
        <ValidationSummary />
    </EditForm>
    @*        <RadzenButton class="oi oi-cart blue-button cart-button" Text="В корзину" />
    <RadzenButton class="oi oi-heart blue-button favourites-button" Text="В избранное" />
    *@
</div>

@code {

    //List<Data.ConnectDB.Product> product = new List<Data.ConnectDB.Product>();

    protected override void OnInitialized()
    {
        //Guid idproduct = new Guid(id);
        base.OnInitialized();
        //product = Data.GetDataClass.getProduct(idproduct);
    }
    void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);
    }
    public async void GetUser()
    {
        var state = await Provider.GetAuthenticationStateAsync();
        var loginExist = state?.User?.Identity?.Name;
        if (GetDataClass.GetUserData(LoginData.UserName, LoginData.Password).Count < 1)
        {

            string messageError = "Не верный логин/пароль или пользователя не существует";
            var message = new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Ошибка при регистрации:", Detail = @messageError, Duration = 4000 };
            NotificationService.Notify(message);
            navigationManager.NavigateTo("/authorization");
        }
    }
    //[Parameter]
    //public string id { get; set; }
}
