@using static Handicraft.Data.GetDataClass;
@using static Handicraft.Data.ConnectDB;
@inject NavigationManager NavigationManager;
@inject AuthenticationStateProvider Provider

<div class="product-container">
    @if (TypeProduct != null)
    {
        @foreach (var prod in products)
        {
            <div class="product-field">
                <NavLink class="name"><a class="product-link" @ref=MyElementReference href="product/@prod.id">@prod.name</a></NavLink>
                @if (prod.id == new Guid("9fde9a32-2594-4429-ba8c-a98437a459bd"))
                {
                    <img src="/images/scorp.jpg" class="img-product" style="" />
                }
                @if (prod.id == new Guid("9fde9a32-2594-4429-ba8c-a98437a459bc"))
                {
                    <img src="/images/shark.jpg" class="img-product" style="" />
                }
                @if (prod.id == new Guid("9fde9a32-2594-4429-ba8c-a98437a459bb"))
                {
                    <img src="/images/fallout.jpg" class="img-product" style="" />
                }
                <span class="price">Стоимость: @prod.price лей</span>
                <RadzenButton class="button blue-button order-button">Заказать</RadzenButton>
                @if (userIsAdmin == true)
                {
                    <RadzenButton class="blue-button delete-button" href="@deleteButton" Click="@deleteProduct">Удалить товар</RadzenButton>
                }

            </div>
        }
    }

</div>
@code {
    ElementReference ReferenceToInputControl;
    List<Product>? products = new List<Product>();
    RadzenButton deleteButton;
    NavLink navElement;
    ElementReference MyElementReference;
    List<User> user { get; set; }
    bool? userIsAdmin = false;

    [Parameter]
    public Data.ConnectDB.Type? TypeProduct { get; set; }
    public void productLink()
    {
        /*if (products[0] != null)
            {
            var test = navlink;
            NavigationManager.NavigateTo("product/"+products[0].id.ToString());
        }*/
    }
    protected override void OnInitialized()
    {
        base.OnInitialized();
        getUserData();

    }
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        uploadData();
    }

    public void uploadData()
    {
        if (TypeProduct != null)
        {
            products = getProductsType(TypeProduct);
        }
    }
    public void deleteProduct()
    {
        using (var db = new ConnectContext("", ""))
        {
            var mess = "";
            string test = System.Text.Json.JsonSerializer.Serialize(MyElementReference.Id);
        }
    }
    public async void getUserData()
    {
        var state = await Provider.GetAuthenticationStateAsync();
        user = GetUserData(state?.User?.Identity?.Name);
        if (user.Count > 0)
        {
            userIsAdmin = user[0].admin_right;
            StateHasChanged();
        }

    }
}
